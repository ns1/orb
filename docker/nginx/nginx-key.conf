# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

# This is the default Mainflux NGINX configuration.

user nginx;
worker_processes auto;
worker_cpu_affinity auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
    # Explanation: https://serverfault.com/questions/787919/optimal-value-for-nginx-worker-connections
    # We'll keep 10k connections per core (assuming one worker per core)
    worker_connections 10000;
}

http {
    include snippets/http_access_log.conf;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    # Include single-node or multiple-node (cluster) upstream
    include snippets/mqtt-ws-upstream.conf;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        include snippets/ssl.conf;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header Access-Control-Allow-Origin '*';
        add_header Access-Control-Allow-Methods '*';
        add_header Access-Control-Allow-Headers '*';

        server_name localhost;

        # Proxy pass to mf users service
        location ~ ^/api/v1/(users|tokens|password) {
            include snippets/proxy-headers.conf;
            proxy_pass http://users:${MF_USERS_HTTP_PORT};
        }

        # Proxy pass to mf auth service
        location ~ ^/api/v1/(keys) {
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://auth:${MF_AUTH_HTTP_PORT};
        }

        # Proxy pass to version (from fleet)
        location /api/v1/version {
            rewrite ^/api/v1/(.+) /$1 break;
            include snippets/proxy-headers.conf;
            proxy_pass http://fleet:${ORB_FLEET_HTTP_PORT};
        }

        # Proxy pass to fleet service
        location ~ ^/api/v1/(agents|agent_groups) {
            rewrite ^/api/v1/(.+) /$1 break;
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://fleet:${ORB_FLEET_HTTP_PORT};
        }

        # Proxy pass to sinks service
        location ~ ^/api/v1/sinks {
            rewrite ^/api/v1/(.+) /$1 break;
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://sinks:${ORB_SINKS_HTTP_PORT};
        }

        # Proxy pass to sinks feature service
        location ~ ^/api/v1/features/sinks {
            rewrite ^/api/v1/(.+) /$1 break;
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://sinks:${ORB_SINKS_HTTP_PORT};
        }

        # Proxy pass to policies service
        location ~ ^/api/v1/policies {
            rewrite ^/api/v1/(.+) /$1 break;
            include snippets/proxy-headers.conf;
            add_header Access-Control-Expose-Headers Location;
            proxy_pass http://policies:${ORB_POLICIES_HTTP_PORT};
        }

        # User Interface
        location / {
            include snippets/proxy-headers.conf;
            proxy_pass http://ui:${MF_UI_PORT};
        }

    }
}

# MQTT
stream {
   include snippets/stream_access_log.conf;

    # Include single-node or multiple-node (cluster) upstream
    include snippets/mqtt-upstream.conf;

    server {
        listen ${MF_NGINX_MQTT_PORT};
        listen [::]:${MF_NGINX_MQTT_PORT};
        listen ${MF_NGINX_MQTTS_PORT} ssl;
        listen [::]:${MF_NGINX_MQTTS_PORT} ssl;

        include snippets/ssl.conf;

        proxy_pass mqtt_cluster;
    }
}

error_log /dev/stdout info;
