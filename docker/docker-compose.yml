# Original Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

# Adapted for Orb project, modifications licensed under MPL v. 2.0:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/. */

version: "3.7"

networks:
  orb-base-net:
    driver: bridge

volumes:
  mainflux-auth-db-volume:
  mainflux-users-db-volume:
  mainflux-things-db-volume:
  mainflux-keto-db-volume:
  mainflux-auth-redis-volume:
  mainflux-es-redis-volume:
  mainflux-mqtt-broker-volume:
  orb-prometheus-volume:
  orb-grafana-volume:
  orb-fleet-db-volume:
  orb-policies-db-volume:
  orb-sinks-db-volume:
  orb-sinker-redis-volume:

services:

## keto ##

  keto:
    image: oryd/keto:v0.8.0-alpha.2
    container_name: mainflux-keto
    ports:
      - ${MF_KETO_READ_REMOTE_PORT}:${MF_KETO_READ_REMOTE_PORT}
      - ${MF_KETO_WRITE_REMOTE_PORT}:${MF_KETO_WRITE_REMOTE_PORT}
    environment:
      - DSN=postgresql://${MF_KETO_DB_USER}:${MF_KETO_DB_PASS}@keto-db:${MF_KETO_DB_PORT}/${MF_KETO_DB}?sslmode=disable
    command: serve -c /home/ory/keto.yml
    restart: on-failure
    volumes:
      - type: bind
        source: ./keto
        target: /home/ory
    networks:
      - orb-base-net
    depends_on:
      - keto-db

  keto-migrate:
    image: oryd/keto:v0.8.0-alpha.2
    container_name: mainflux-keto-migrate
    environment:
      - KETO_WRITE_REMOTE=keto:${MF_KETO_WRITE_REMOTE_PORT}
      - KETO_READ_REMOTE=keto:${MF_KETO_READ_REMOTE_PORT}
      - DSN=postgresql://${MF_KETO_DB_USER}:${MF_KETO_DB_PASS}@keto-db:${MF_KETO_DB_PORT}/${MF_KETO_DB}?sslmode=disable
    volumes:
      - type: bind
        source: ./keto
        target: /home/ory
    command: migrate up -c /home/ory/keto.yml --yes
    restart: on-failure
    networks:
      - orb-base-net
    depends_on:
      - keto-db

  keto-db:
    image: postgres:13.3-alpine
    container_name: mainflux-keto-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_KETO_DB_USER}
      POSTGRES_PASSWORD: ${MF_KETO_DB_PASS}
      POSTGRES_DB: ${MF_KETO_DB}
    ports:
      - 15007:5432
    networks:
      - orb-base-net
    volumes:
      - mainflux-keto-db-volume:/var/lib/postgresql/data

## mainflux core messaging ##

  nats:
    image: nats:2.2-alpine
    container_name: orb-nats
    command: "-c /etc/nats/nats.conf"
    restart: on-failure
    volumes:
      - ./nats/:/etc/nats
    ports:
      - 4222:4222
    networks:
      - orb-base-net

  es-redis:
    image: redis:6.2.2-alpine
    container_name: orb-es-redis
    restart: on-failure
    networks:
      - orb-base-net
    ports:
      - 6379:6379
    volumes:
      - mainflux-es-redis-volume:/data

  vernemq:
    image: "mainflux/vernemq:${MF_RELEASE_TAG}"
    container_name: orb-vernemq
    restart: on-failure
    environment:
      DOCKER_VERNEMQ_ALLOW_ANONYMOUS: ${MF_DOCKER_VERNEMQ_ALLOW_ANONYMOUS}
      DOCKER_VERNEMQ_LOG__CONSOLE__LEVEL: ${MF_DOCKER_VERNEMQ_LOG__CONSOLE__LEVEL}
    networks:
      - orb-base-net
    volumes:
      - mainflux-mqtt-broker-volume:/var/lib/vernemq

  ## mainflux core services ##

  auth-db:
    image: postgres:13-alpine
    container_name: mainflux-auth-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_AUTH_DB_USER}
      POSTGRES_PASSWORD: ${MF_AUTH_DB_PASS}
      POSTGRES_DB: ${MF_AUTH_DB}
    ports:
      - 15001:5432
    networks:
      - orb-base-net
    volumes:
      - mainflux-auth-db-volume:/var/lib/postgresql/data

  auth:
    image: "mainflux/auth:${MF_RELEASE_TAG}"
    container_name: mainflux-auth
    depends_on:
      - auth-db
    expose:
      - ${MF_AUTH_GRPC_PORT}
    restart: on-failure
    environment:
      MF_AUTH_LOG_LEVEL: ${MF_AUTH_LOG_LEVEL}
      MF_AUTH_DB_HOST: auth-db
      MF_AUTH_DB_PORT: ${MF_AUTH_DB_PORT}
      MF_AUTH_DB_USER: ${MF_AUTH_DB_USER}
      MF_AUTH_DB_PASS: ${MF_AUTH_DB_PASS}
      MF_AUTH_DB: ${MF_AUTH_DB}
      MF_AUTH_HTTP_PORT: ${MF_AUTH_HTTP_PORT}
      MF_AUTH_GRPC_PORT: ${MF_AUTH_GRPC_PORT}
      MF_AUTH_SECRET: ${MF_AUTH_SECRET}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_AUTH_HTTP_PORT}:${MF_AUTH_HTTP_PORT}
      - ${MF_AUTH_GRPC_PORT}:${MF_AUTH_GRPC_PORT}
    networks:
      - orb-base-net

  auth-redis:
    image: redis:6.2-alpine
    container_name: mainflux-auth-redis
    restart: on-failure
    networks:
      - orb-base-net
    volumes:
      - mainflux-auth-redis-volume:/data

  users-db:
    image: postgres:13-alpine
    container_name: mainflux-users-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_USERS_DB_USER}
      POSTGRES_PASSWORD: ${MF_USERS_DB_PASS}
      POSTGRES_DB: ${MF_USERS_DB}
    ports:
      - 15002:5432
    networks:
      - orb-base-net
    volumes:
      - mainflux-users-db-volume:/var/lib/postgresql/data

  users:
    image: "mainflux/users:${MF_RELEASE_TAG}"
    container_name: mainflux-users
    volumes:
      - ./templates/${MF_USERS_RESET_PWD_TEMPLATE}:/${MF_EMAIL_TEMPLATE}
    depends_on:
      - users-db
      - auth
    restart: on-failure
    environment:
      MF_USERS_LOG_LEVEL: ${MF_USERS_LOG_LEVEL}
      MF_USERS_DB_HOST: users-db
      MF_USERS_DB_PORT: ${MF_USERS_DB_PORT}
      MF_USERS_DB_USER: ${MF_USERS_DB_USER}
      MF_USERS_DB_PASS: ${MF_USERS_DB_PASS}
      MF_USERS_DB: ${MF_USERS_DB}
      MF_USERS_HTTP_PORT: ${MF_USERS_HTTP_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_EMAIL_HOST: ${MF_EMAIL_HOST}
      MF_EMAIL_PORT: ${MF_EMAIL_PORT}
      MF_EMAIL_USERNAME: ${MF_EMAIL_USERNAME}
      MF_EMAIL_PASSWORD: ${MF_EMAIL_PASSWORD}
      MF_EMAIL_FROM_ADDRESS: ${MF_EMAIL_FROM_ADDRESS}
      MF_EMAIL_FROM_NAME: ${MF_EMAIL_FROM_NAME}
      MF_EMAIL_TEMPLATE: ${MF_EMAIL_TEMPLATE}
      MF_TOKEN_RESET_ENDPOINT: ${MF_TOKEN_RESET_ENDPOINT}
      MF_AUTH_GRPC_URL: ${MF_AUTH_GRPC_URL}
      MF_AUTH_GRPC_TIMEOUT: ${MF_AUTH_GRPC_TIMEOUT}
      MF_USERS_ADMIN_EMAIL: ${MF_USERS_ADMIN_EMAIL}
      MF_USERS_ADMIN_PASSWORD: ${MF_USERS_ADMIN_PASSWORD}
      MF_USERS_ALLOW_SELF_REGISTER: ${MF_USERS_ALLOW_SELF_REGISTER}
    ports:
      - ${MF_USERS_HTTP_PORT}:${MF_USERS_HTTP_PORT}
    networks:
      - orb-base-net

  things-db:
    image: postgres:13-alpine
    container_name: mainflux-things-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${MF_THINGS_DB_USER}
      POSTGRES_PASSWORD: ${MF_THINGS_DB_PASS}
      POSTGRES_DB: ${MF_THINGS_DB}
    ports:
      - 15003:5432
    networks:
      - orb-base-net
    volumes:
      - mainflux-things-db-volume:/var/lib/postgresql/data

  things:
    image: "mainflux/things:${MF_RELEASE_TAG}"
    container_name: mainflux-things
    depends_on:
      - things-db
      - auth
    restart: on-failure
    environment:
      MF_THINGS_LOG_LEVEL: ${MF_THINGS_LOG_LEVEL}
      MF_THINGS_DB_HOST: things-db
      MF_THINGS_DB_PORT: ${MF_THINGS_DB_PORT}
      MF_THINGS_DB_USER: ${MF_THINGS_DB_USER}
      MF_THINGS_DB_PASS: ${MF_THINGS_DB_PASS}
      MF_THINGS_DB: ${MF_THINGS_DB}
      MF_THINGS_CACHE_URL: auth-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_HTTP_PORT: ${MF_THINGS_HTTP_PORT}
      MF_THINGS_AUTH_HTTP_PORT: ${MF_THINGS_AUTH_HTTP_PORT}
      MF_THINGS_AUTH_GRPC_PORT: ${MF_THINGS_AUTH_GRPC_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_AUTH_GRPC_URL: ${MF_AUTH_GRPC_URL}
      MF_AUTH_GRPC_TIMEOUT: ${MF_AUTH_GRPC_TIMEOUT}
    ports:
      - ${MF_THINGS_HTTP_PORT}:${MF_THINGS_HTTP_PORT}
      - ${MF_THINGS_AUTH_HTTP_PORT}:${MF_THINGS_AUTH_HTTP_PORT}
      - ${MF_THINGS_AUTH_GRPC_PORT}:${MF_THINGS_AUTH_GRPC_PORT}
    networks:
      - orb-base-net

  mqtt-adapter:
    image: "mainflux/mqtt:${MF_RELEASE_TAG}"
    container_name: mainflux-mqtt
    depends_on:
      - vernemq
      - things
      - nats
    restart: on-failure
    environment:
      MF_MQTT_ADAPTER_LOG_LEVEL: ${MF_MQTT_ADAPTER_LOG_LEVEL}
      MF_MQTT_ADAPTER_MQTT_PORT: ${MF_MQTT_ADAPTER_MQTT_PORT}
      MF_MQTT_ADAPTER_WS_PORT: ${MF_MQTT_ADAPTER_WS_PORT}
      MF_MQTT_ADAPTER_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_MQTT_ADAPTER_MQTT_TARGET_HOST: vernemq
      MF_MQTT_ADAPTER_MQTT_TARGET_PORT: ${MF_MQTT_BROKER_PORT}
      MF_MQTT_ADAPTER_MQTT_TARGET_HEALTH_CHECK: http://vernemq:8888/health
      MF_MQTT_ADAPTER_WS_TARGET_HOST: vernemq
      MF_MQTT_ADAPTER_WS_TARGET_PORT: ${MF_MQTT_BROKER_WS_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_THINGS_AUTH_GRPC_URL: ${MF_THINGS_AUTH_GRPC_URL}
      MF_THINGS_AUTH_GRPC_TIMEOUT: ${MF_THINGS_AUTH_GRPC_TIMEOUT}
      MF_AUTH_CACHE_URL: auth-redis:${MF_REDIS_TCP_PORT}
    networks:
      - orb-base-net

  http-adapter:
    image: "mainflux/http:${MF_RELEASE_TAG}"
    container_name: mainflux-http
    depends_on:
      - things
      - nats
    restart: on-failure
    environment:
      MF_HTTP_ADAPTER_LOG_LEVEL: debug
      MF_HTTP_ADAPTER_PORT: ${MF_HTTP_ADAPTER_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_THINGS_AUTH_GRPC_URL: ${MF_THINGS_AUTH_GRPC_URL}
      MF_THINGS_AUTH_GRPC_TIMEOUT: ${MF_THINGS_AUTH_GRPC_TIMEOUT}
    ports:
      - ${MF_HTTP_ADAPTER_PORT}:${MF_HTTP_ADAPTER_PORT}
    networks:
      - orb-base-net

## common core services ##

  jaeger:
    image: jaegertracing/all-in-one:1.22
    container_name: orb-app-jaeger
    ports:
      - ${MF_JAEGER_PORT}:${MF_JAEGER_PORT}/udp
      - ${MF_JAEGER_FRONTEND}:${MF_JAEGER_FRONTEND}
      - ${MF_JAEGER_COLLECTOR}:${MF_JAEGER_COLLECTOR}
      - ${MF_JAEGER_CONFIGS}:${MF_JAEGER_CONFIGS}
    networks:
      - orb-base-net

  prometheus:
    image: prom/prometheus:v2.26.0
    container_name: orb-app-prom
    restart: on-failure
    ports:
      - ${MF_PROMETHEUS_PORT}:${MF_PROMETHEUS_PORT}
    networks:
      - orb-base-net
    volumes:
      - orb-prometheus-volume:/prometheus
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:7.5.5
    container_name: orb-app-grafana
    depends_on:
      - prometheus
    restart: on-failure
    ports:
      - ${MF_PUBLIC_GRAFANA_PORT}:${MF_GRAFANA_PORT}
    networks:
      - orb-base-net
    volumes:
      - orb-grafana-volume:/var/lib/grafana
      - ./configs/grafana-defaults.ini:/usr/share/grafana/conf/defaults.ini

## orb services ##

  fleet-db:
    image: postgres:13-alpine
    container_name: orb-fleet-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${ORB_FLEET_DB_USER}
      POSTGRES_PASSWORD: ${ORB_FLEET_DB_PASS}
      POSTGRES_DB: ${ORB_FLEET_DB_DB}
    ports:
      - 15004:5432
    networks:
      - orb-base-net
    volumes:
      - orb-fleet-db-volume:/var/lib/postgresql/data

  policies-db:
    image: postgres:13-alpine
    container_name: orb-policies-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${ORB_POLICIES_DB_USER}
      POSTGRES_PASSWORD: ${ORB_POLICIES_DB_PASS}
      POSTGRES_DB: ${ORB_POLICIES_DB_DB}
    ports:
      - 15005:5432
    networks:
      - orb-base-net
    volumes:
      - orb-policies-db-volume:/var/lib/postgresql/data

  sinks-db:
    image: postgres:13-alpine
    container_name: orb-sinks-db
    restart: on-failure
    environment:
      POSTGRES_USER: ${ORB_SINKS_DB_USER}
      POSTGRES_PASSWORD: ${ORB_SINKS_DB_PASS}
      POSTGRES_DB: ${ORB_SINKS_DB_DB}
    ports:
      - 15006:5432
    networks:
      - orb-base-net
    volumes:
      - orb-sinks-db-volume:/var/lib/postgresql/data

  policies:
    image: "ns1labs/orb-policies:${ORB_RELEASE_TAG}"
    container_name: orb-policies
    ports:
      - ${ORB_POLICIES_HTTP_PORT}:${ORB_POLICIES_HTTP_PORT}
      - ${ORB_POLICIES_GRPC_PORT}:${ORB_POLICIES_GRPC_PORT}
    depends_on:
      - es-redis
      - policies-db
      - auth
      - jaeger
    restart: on-failure
    environment:
      ORB_POLICIES_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      ORB_POLICIES_NATS_URL: ${MF_NATS_URL}
      ORB_POLICIES_DB_HOST: POLICIES-db
      ORB_POLICIES_DB_USER: ${ORB_POLICIES_DB_USER}
      ORB_POLICIES_DB_PASS: ${ORB_POLICIES_DB_PASS}
      ORB_POLICIES_DB: ${ORB_POLICIES_DB_DB}
      ORB_POLICIES_DB_SSL_MODE: disable
      ORB_POLICIES_GRPC_PORT: ${ORB_POLICIES_GRPC_PORT}
      MF_AUTH_GRPC_URL: ${MF_AUTH_GRPC_URL}
      MF_AUTH_GRPC_TIMEOUT: ${MF_AUTH_GRPC_TIMEOUT}
      ORB_FLEET_GRPC_URL: ${ORB_FLEET_GRPC_URL}
      ORB_FLEET_GRPC_TIMEOUT: ${ORB_FLEET_GRPC_TIMEOUT}
      ORB_SINKS_GRPC_URL: ${ORB_SINKS_GRPC_URL}
      ORB_SINKS_GRPC_TIMEOUT: ${ORB_SINKS_GRPC_TIMEOUT}
    networks:
      - orb-base-net

  sinks:
    image: "ns1labs/orb-sinks:${ORB_RELEASE_TAG}"
    container_name: orb-sinks
    ports:
      - ${ORB_SINKS_HTTP_PORT}:${ORB_SINKS_HTTP_PORT}
      - ${ORB_SINKS_GRPC_PORT}:${ORB_SINKS_GRPC_PORT}
    depends_on:
      - es-redis
      - sinks-db
      - auth
      - jaeger
    restart: on-failure
    environment:
      ORB_SINKS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      ORB_SINKS_NATS_URL: ${MF_NATS_URL}
      ORB_SINKS_DB_HOST: sinks-db
      ORB_SINKS_DB_USER: ${ORB_SINKS_DB_USER}
      ORB_SINKS_DB_PASS: ${ORB_SINKS_DB_PASS}
      ORB_SINKS_DB: ${ORB_SINKS_DB_DB}
      ORB_SINKS_DB_SSL_MODE: disable
      ORB_SINKS_GRPC_PORT: ${ORB_SINKS_GRPC_PORT}
      MF_AUTH_GRPC_URL: ${MF_AUTH_GRPC_URL}
      MF_AUTH_GRPC_TIMEOUT: ${MF_AUTH_GRPC_TIMEOUT}
      ORB_SINKS_SECRET_KEY: "orb-secret"
    #      ORB_SINKS_LOG_LEVEL: debug
    networks:
      - orb-base-net

  fleet:
    image: "ns1labs/orb-fleet:${ORB_RELEASE_TAG}"
    container_name: orb-fleet
    ports:
      - ${ORB_FLEET_HTTP_PORT}:${ORB_FLEET_HTTP_PORT}
      - ${ORB_FLEET_GRPC_PORT}:${ORB_FLEET_GRPC_PORT}
    depends_on:
      - es-redis
      - nats
      - fleet-db
      - auth
      - jaeger
      - things
    #      - policies
    restart: on-failure
    environment:
      ORB_FLEET_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      ORB_FLEET_NATS_URL: ${MF_NATS_URL}
      ORB_FLEET_DB_HOST: fleet-db
      ORB_FLEET_DB_USER: ${ORB_FLEET_DB_USER}
      ORB_FLEET_DB_PASS: ${ORB_FLEET_DB_PASS}
      ORB_FLEET_DB: ${ORB_FLEET_DB_DB}
      ORB_FLEET_DB_SSL_MODE: disable
      ORB_FLEET_GRPC_PORT: ${ORB_FLEET_GRPC_PORT}
      MF_SDK_THINGS_URL: http://things:${MF_THINGS_HTTP_PORT}
      MF_AUTH_GRPC_URL: ${MF_AUTH_GRPC_URL}
      MF_AUTH_GRPC_TIMEOUT: ${MF_AUTH_GRPC_TIMEOUT}
      ORB_POLICIES_GRPC_URL: ${ORB_POLICIES_GRPC_URL}
      ORB_POLICIES_GRPC_TIMEOUT: ${ORB_POLICIES_GRPC_TIMEOUT}
      ORB_FLEET_LOG_LEVEL: debug
    networks:
      - orb-base-net

  sinker-redis:
    image: redis:6.2-alpine
    container_name: sinker-redis
    restart: on-failure
    networks:
      - orb-base-net
    volumes:
      - orb-sinker-redis-volume:/data

  sinker:
    image: "ns1labs/orb-sinker:${ORB_RELEASE_TAG}"
    container_name: orb-sinker
    depends_on:
      - nats
      - es-redis
    restart: on-failure
    environment:
      ORB_SINKER_LOG_LEVEL: debug
      ORB_SINKER_NATS_URL: ${MF_NATS_URL}
      ORB_SINKER_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      ORB_SINKER_CACHE_URL: sinker-redis:${MF_REDIS_TCP_PORT}
      ORB_POLICIES_GRPC_URL: ${ORB_POLICIES_GRPC_URL}
      ORB_POLICIES_GRPC_TIMEOUT: ${ORB_POLICIES_GRPC_TIMEOUT}
      ORB_FLEET_GRPC_URL: ${ORB_FLEET_GRPC_URL}
      ORB_FLEET_GRPC_TIMEOUT: ${ORB_FLEET_GRPC_TIMEOUT}
      ORB_SINKS_GRPC_URL: ${ORB_SINKS_GRPC_URL}
      ORB_SINKS_GRPC_TIMEOUT: ${ORB_SINKS_GRPC_TIMEOUT}
    networks:
      - orb-base-net

  ui:
    image: "ns1labs/orb-ui:${ORB_RELEASE_TAG}"
    container_name: orb-ui
    restart: on-failure
    volumes:
      - ./nginx/entrypoint-ui.sh:/entrypoint.sh
    networks:
      - orb-base-net
    environment:
      MF_UI_PORT: ${MF_UI_PORT}
      MF_UI_MQTT_WS_URL: ${MF_UI_MQTT_WS_URL}
      PS_SID: ${PS_SID}
      PS_GROUP_KEY: ${PS_GROUP_KEY}
      
    command: /entrypoint.sh

  ## main LB ##

  nginx:
    image: nginx:1.19-alpine
    container_name: orb-nginx
    restart: on-failure
    volumes:
      - ./nginx/nginx-${AUTH-key}.conf:/etc/nginx/nginx.conf.template
      - ./nginx/entrypoint.sh:/entrypoint.sh
      - ./nginx/snippets:/etc/nginx/snippets
      - ./ssl/authorization.js:/etc/nginx/authorization.js
      - ./ssl/certs/mainflux-server.crt:/etc/ssl/certs/mainflux-server.crt
      - ./ssl/certs/ca.crt:/etc/ssl/certs/ca.crt
      - ./ssl/certs/mainflux-server.key:/etc/ssl/private/mainflux-server.key
      - ./ssl/dhparam.pem:/etc/ssl/certs/dhparam.pem
    ports:
      - ${MF_NGINX_HTTP_PORT}:${MF_NGINX_HTTP_PORT}
      - ${MF_NGINX_SSL_PORT}:${MF_NGINX_SSL_PORT}
      - ${MF_NGINX_MQTT_PORT}:${MF_NGINX_MQTT_PORT}
      - ${MF_NGINX_MQTTS_PORT}:${MF_NGINX_MQTTS_PORT}
    networks:
      - orb-base-net
    env_file:
      - .env
    command: /entrypoint.sh
