// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FleetServiceClient is the client API for FleetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FleetServiceClient interface {
	RetrieveAgent(ctx context.Context, in *AgentByIDReq, opts ...grpc.CallOption) (*AgentRes, error)
	RetrieveAgentGroup(ctx context.Context, in *AgentGroupByIDReq, opts ...grpc.CallOption) (*AgentGroupRes, error)
	RetrieveOwnerByChannelID(ctx context.Context, in *OwnerByChannelIDReq, opts ...grpc.CallOption) (*OwnerRes, error)
	RetrieveAgentInfoByChannelID(ctx context.Context, in *AgentInfoByChannelIDReq, opts ...grpc.CallOption) (*AgentInfoRes, error)
}

type fleetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFleetServiceClient(cc grpc.ClientConnInterface) FleetServiceClient {
	return &fleetServiceClient{cc}
}

func (c *fleetServiceClient) RetrieveAgent(ctx context.Context, in *AgentByIDReq, opts ...grpc.CallOption) (*AgentRes, error) {
	out := new(AgentRes)
	err := c.cc.Invoke(ctx, "/fleet.FleetService/RetrieveAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) RetrieveAgentGroup(ctx context.Context, in *AgentGroupByIDReq, opts ...grpc.CallOption) (*AgentGroupRes, error) {
	out := new(AgentGroupRes)
	err := c.cc.Invoke(ctx, "/fleet.FleetService/RetrieveAgentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) RetrieveOwnerByChannelID(ctx context.Context, in *OwnerByChannelIDReq, opts ...grpc.CallOption) (*OwnerRes, error) {
	out := new(OwnerRes)
	err := c.cc.Invoke(ctx, "/fleet.FleetService/RetrieveOwnerByChannelID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fleetServiceClient) RetrieveAgentInfoByChannelID(ctx context.Context, in *AgentInfoByChannelIDReq, opts ...grpc.CallOption) (*AgentInfoRes, error) {
	out := new(AgentInfoRes)
	err := c.cc.Invoke(ctx, "/fleet.FleetService/RetrieveAgentInfoByChannelID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FleetServiceServer is the server API for FleetService service.
// All implementations must embed UnimplementedFleetServiceServer
// for forward compatibility
type FleetServiceServer interface {
	RetrieveAgent(context.Context, *AgentByIDReq) (*AgentRes, error)
	RetrieveAgentGroup(context.Context, *AgentGroupByIDReq) (*AgentGroupRes, error)
	RetrieveOwnerByChannelID(context.Context, *OwnerByChannelIDReq) (*OwnerRes, error)
	RetrieveAgentInfoByChannelID(context.Context, *AgentInfoByChannelIDReq) (*AgentInfoRes, error)
	mustEmbedUnimplementedFleetServiceServer()
}

// UnimplementedFleetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFleetServiceServer struct {
}

func (UnimplementedFleetServiceServer) RetrieveAgent(context.Context, *AgentByIDReq) (*AgentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAgent not implemented")
}
func (UnimplementedFleetServiceServer) RetrieveAgentGroup(context.Context, *AgentGroupByIDReq) (*AgentGroupRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAgentGroup not implemented")
}
func (UnimplementedFleetServiceServer) RetrieveOwnerByChannelID(context.Context, *OwnerByChannelIDReq) (*OwnerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOwnerByChannelID not implemented")
}
func (UnimplementedFleetServiceServer) RetrieveAgentInfoByChannelID(context.Context, *AgentInfoByChannelIDReq) (*AgentInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAgentInfoByChannelID not implemented")
}
func (UnimplementedFleetServiceServer) mustEmbedUnimplementedFleetServiceServer() {}

// UnsafeFleetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FleetServiceServer will
// result in compilation errors.
type UnsafeFleetServiceServer interface {
	mustEmbedUnimplementedFleetServiceServer()
}

func RegisterFleetServiceServer(s grpc.ServiceRegistrar, srv FleetServiceServer) {
	s.RegisterService(&FleetService_ServiceDesc, srv)
}

func _FleetService_RetrieveAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).RetrieveAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.FleetService/RetrieveAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).RetrieveAgent(ctx, req.(*AgentByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_RetrieveAgentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGroupByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).RetrieveAgentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.FleetService/RetrieveAgentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).RetrieveAgentGroup(ctx, req.(*AgentGroupByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_RetrieveOwnerByChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerByChannelIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).RetrieveOwnerByChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.FleetService/RetrieveOwnerByChannelID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).RetrieveOwnerByChannelID(ctx, req.(*OwnerByChannelIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FleetService_RetrieveAgentInfoByChannelID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfoByChannelIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FleetServiceServer).RetrieveAgentInfoByChannelID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fleet.FleetService/RetrieveAgentInfoByChannelID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FleetServiceServer).RetrieveAgentInfoByChannelID(ctx, req.(*AgentInfoByChannelIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FleetService_ServiceDesc is the grpc.ServiceDesc for FleetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FleetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fleet.FleetService",
	HandlerType: (*FleetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveAgent",
			Handler:    _FleetService_RetrieveAgent_Handler,
		},
		{
			MethodName: "RetrieveAgentGroup",
			Handler:    _FleetService_RetrieveAgentGroup_Handler,
		},
		{
			MethodName: "RetrieveOwnerByChannelID",
			Handler:    _FleetService_RetrieveOwnerByChannelID_Handler,
		},
		{
			MethodName: "RetrieveAgentInfoByChannelID",
			Handler:    _FleetService_RetrieveAgentInfoByChannelID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fleet/pb/fleet.proto",
}
